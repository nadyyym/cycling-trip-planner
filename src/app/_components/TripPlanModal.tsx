"use client";

import { useEffect } from "react";
import ReactMarkdown from "react-markdown";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "~/components/ui/dialog";
import { useTripPlanner, type TripPlanInput } from "~/app/_hooks/useTripPlanner";
import { useTripRouteStore, type Trip, type TripRoute } from "~/app/_hooks/useTripRouteStore";
import { useTripConstraintStore } from "~/app/_hooks/useTripConstraintStore";
import { useToast } from "~/hooks/use-toast";

/**
 * Converts a successful plan response to Markdown format
 * Creates a human-readable itinerary with day-by-day breakdown
 * 
 * @param data The successful plan response from the API
 * @returns Formatted Markdown string
 */
function planResponseToMarkdown(data: { ok: true; routes: Array<{ dayNumber: number; distanceKm: number; elevationGainM: number; segments: Array<{ id: number; name: string; stravaUrl: string }>; durationMinutes: number }>; totalDistanceKm: number; totalElevationGainM: number; totalDurationMinutes: number }): string {
  const lines: string[] = [];
  
  // Trip header
  lines.push("# 🚴‍♀️ Your Cycling Trip Itinerary");
  lines.push("");
  
  // Trip summary
  lines.push("## Trip Summary");
  lines.push(`**Total Distance:** ${Math.round(data.totalDistanceKm)} km  `);
  lines.push(`**Total Elevation:** ${Math.round(data.totalElevationGainM)} m  `);
  lines.push(`**Estimated Duration:** ${Math.round(data.totalDurationMinutes / 60 * 10) / 10} hours  `);
  lines.push(`**Number of Days:** ${data.routes.length}`);
  lines.push("");
  
  // Day-by-day breakdown
  for (const route of data.routes) {
    lines.push(`## Day ${route.dayNumber}`);
    lines.push(`**Distance:** ${Math.round(route.distanceKm)} km  **Elevation:** ${Math.round(route.elevationGainM)} m  **Duration:** ${Math.round(route.durationMinutes / 60 * 10) / 10} hours`);
    lines.push("");
    
    if (route.segments.length > 0) {
      lines.push("| # | Segment | Link |");
      lines.push("|:-:|---------|------|");
      
      route.segments.forEach((segment, index) => {
        // Escape any markdown special characters in segment names
        const escapedName = segment.name.replace(/[|\\`*_{}[\]()#+\-.!]/g, '\\$&');
        lines.push(`| ${index + 1} | ${escapedName} | [Strava](${segment.stravaUrl}) |`);
      });
      lines.push("");
    } else {
      lines.push("*No segments planned for this day*");
      lines.push("");
    }
  }
  
  // Footer
  lines.push("---");
  lines.push("*Generated by Cycling Trip Planner* 🚴‍♀️");
  
  return lines.join("\n");
}

/**
 * Converts a failed plan response to Markdown format
 * Creates a readable error message with details
 * 
 * @param data The failed plan response from the API
 * @returns Formatted Markdown error message
 */
function planErrorToMarkdown(data: { ok: false; error: string; details: string }): string {
  const lines: string[] = [];
  
  lines.push("# ❌ Trip Planning Failed");
  lines.push("");
  
  // Error type-specific messages with detailed explanations
  switch (data.error) {
    case "dailyLimitExceeded":
      lines.push("## 🚫 Daily Limit Exceeded");
      lines.push("**Problem:** One day would exceed the safe cycling limits of 100 km distance or 1000 m elevation gain.");
      lines.push("");
      lines.push("**What this means:** For safety and enjoyment, we limit daily rides to reasonable distances and climbing.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Remove one or more segments from your selection");
      lines.push("- Choose segments that are closer together");
      lines.push("- Consider splitting your trip across more days (contact support for 5+ day trips)");
      break;
    case "customLimitExceeded":
      lines.push("## 🚫 Custom Limit Exceeded");
      lines.push("**Problem:** One or more segments exceed your custom daily limits.");
      lines.push("");
      lines.push("**What this means:** The segments you selected are too demanding for your chosen daily distance or elevation limits.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Increase your daily distance or elevation limits");
      lines.push("- Remove the most demanding segments from your selection");
      lines.push("- Choose segments that are more suited to your fitness level");
      break;
    case "easyDayViolation":
      lines.push("## 🛌 Easier Day Rule Violated");
      lines.push("**Problem:** An easier day would still exceed the reduced limits for recovery days.");
      lines.push("");
      lines.push("**What this means:** Even with the easier day rule applied, one day would be too demanding.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Adjust your easier day limits to be more conservative");
      lines.push("- Remove segments to reduce the overall trip difficulty");
      lines.push("- Choose a longer trip duration to spread out the segments");
      break;
    case "needMoreDays":
      lines.push("## 📅 Need More Days");
      lines.push("**Problem:** The selected segments require more than 4 days to complete safely.");
      lines.push("");
      lines.push("**What this means:** Our current trip planner supports up to 4-day cycling adventures.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Remove some segments to fit within 4 days");
      lines.push("- Choose segments that are closer together");
      lines.push("- Contact support if you need help planning longer trips");
      break;
    case "segmentTooFar":
      lines.push("## 🗺️ Segments Too Far Apart");
      lines.push("**Problem:** The selected segments are too far apart to route efficiently.");
      lines.push("");
      lines.push("**What this means:** The distances between segments would make for impractical daily rides.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Select segments within the same region or area");
      lines.push("- Remove segments that are outliers from your main route");
      lines.push("- Consider planning separate trips for different areas");
      break;
    case "externalApi":
      lines.push("## 🔧 External Service Issue");
      lines.push("**Problem:** There's a temporary issue with Mapbox or Strava services.");
      lines.push("");
      lines.push("**What this means:** We rely on external services for route calculation and segment data.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Wait a few minutes and try again");
      lines.push("- Check your internet connection");
      lines.push("- If the problem persists, contact support");
      break;
    case "notImplemented":
      lines.push("## 🚧 Feature Under Development");
      lines.push("**Problem:** This feature is still being developed.");
      lines.push("");
      lines.push("**What this means:** The trip planning functionality is being enhanced.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Check back later for updates");
      lines.push("- Contact support for manual trip planning assistance");
      break;
    default:
      lines.push("## ❓ Unknown Error");
      lines.push("**Problem:** An unexpected error occurred during trip planning.");
      lines.push("");
      lines.push("**Solutions:**");
      lines.push("- Try again with different segments");
      lines.push("- Check your internet connection");
      lines.push("- Contact support if the problem persists");
      break;
  }
  
  lines.push("");
  lines.push("### Error Details");
  lines.push(`\`\`\`\n${data.details}\n\`\`\``);
  
  lines.push("");
  lines.push("## What to try:");
  lines.push("- Select fewer segments");
  lines.push("- Choose segments that are closer together");
  lines.push("- Try again in a few minutes if it's a service issue");
  
  return lines.join("\n");
}

/**
 * Selected segment information for the modal
 * Simplified interface for UI display
 */
export interface SelectedSegment {
  id: string;
  name: string;
}

/**
 * Props for the TripPlanModal component
 */
interface TripPlanModalProps {
  /** Whether the modal is open */
  open: boolean;
  /** Callback when modal open state changes */
  onOpenChange: (open: boolean) => void;
  /** Array of selected segments to plan trip for */
  selectedSegments: SelectedSegment[];
}

/**
 * Modal component for trip planning workflow
 * Handles the complete flow: trigger planning → show loading → display results/errors
 * 
 * State machine:
 * - Idle: Modal closed or no planning in progress
 * - Planning: API request in progress, show spinner
 * - Success: Show planned routes in Markdown format
 * - Error: Show error message with details
 */
export function TripPlanModal({
  open,
  onOpenChange,
  selectedSegments,
}: TripPlanModalProps) {
  const {
    isPending,
    isError,
    isSuccess,
    error,
    data,
    planTrip,
    reset,
  } = useTripPlanner();

  // Trip route store for map visualization
  const { setTrip } = useTripRouteStore();

  // Trip constraints store
  const { constraints } = useTripConstraintStore();

  // Toast notifications
  const { toast } = useToast();

  // Trigger planning when modal opens with segments
  useEffect(() => {
    if (open && selectedSegments.length > 0 && !isPending && !isSuccess && !isError) {
      console.log("[TRIP_PLAN_MODAL_AUTO_START]", {
        segmentCount: selectedSegments.length,
        segments: selectedSegments.map(s => ({ id: s.id, name: s.name })),
        timestamp: new Date().toISOString(),
      });

      const input: TripPlanInput = {
        segmentIds: selectedSegments.map(s => s.id),
        startDate: constraints.startDate,
        endDate: constraints.endDate,
        maxDailyDistanceKm: constraints.maxDailyDistanceKm,
        maxDailyElevationM: constraints.maxDailyElevationM,
        easierDayRule: constraints.easierDayRule,
      };

      planTrip(input);
    }
  }, [open, selectedSegments, isPending, isSuccess, isError, planTrip, constraints]);

  // Reset state when modal closes
  useEffect(() => {
    if (!open) {
      reset();
    }
  }, [open, reset]);

  // Update trip route store when planning succeeds
  useEffect(() => {
    if (isSuccess && data?.ok) {
      console.log("[TRIP_PLAN_MODAL_SUCCESS]", {
        routeCount: data.routes.length,
        totalDistance: Math.round(data.totalDistanceKm),
        timestamp: new Date().toISOString(),
      });

      // Convert API response to trip route store format
      const tripRoutes: TripRoute[] = data.routes.map((route) => ({
        dayNumber: route.dayNumber,
        geometry: route.geometry,
        distanceKm: route.distanceKm,
        elevationGainM: route.elevationGainM, // Legacy field for backward compatibility
        ascentM: route.ascentM,
        descentM: route.descentM,
        segmentNames: route.segments.map((segment) => segment.name),
      }));

      // Extract start coordinate from first route for map centering
      const startCoordinate = tripRoutes[0]?.geometry.coordinates[0];

      const trip: Trip = {
        routes: tripRoutes,
        totalDistanceKm: data.totalDistanceKm,
        totalElevationGainM: data.totalElevationGainM, // Legacy field for backward compatibility
        totalAscentM: data.totalAscentM,
        totalDescentM: data.totalDescentM,
        startCoordinate,
      };

      // Update the trip route store to trigger map visualization
      setTrip(trip);

      // Show success toast
      toast({
        title: "🚴 Trip Planning Successful!",
        description: `Found ${data.routes.length} day route${data.routes.length === 1 ? "" : "s"} for ${selectedSegments.length} segments.`,
        variant: "default",
      });
    }
  }, [isSuccess, data, setTrip, selectedSegments.length, toast]);

  // Show error toast when planning fails
  useEffect(() => {
    if (isError && error) {
      console.log("[TRIP_PLAN_MODAL_ERROR]", {
        error: error.message,
        timestamp: new Date().toISOString(),
      });

      // Map error message to user-friendly descriptions
      let errorTitle = "Trip Planning Failed";
      let errorDescription = error.message;

      // Check for specific error patterns in the message
      if (error.message.includes("not connected") || error.message.includes("UNAUTHORIZED")) {
        errorTitle = "Authentication Required";
        errorDescription = "Please sign in with Strava to use trip planning.";
      } else if (error.message.includes("daily limit") || error.message.includes("100 km") || error.message.includes("1000 m")) {
        errorTitle = "Daily Limit Exceeded";
        errorDescription = "One day would exceed 100 km distance or 1000 m elevation gain. Try removing a segment.";
      } else if (error.message.includes("need more days") || error.message.includes("4 days")) {
        errorTitle = "Need More Days";
        errorDescription = "The selected segments require more than 4 days. Consider removing some segments.";
      } else if (error.message.includes("too far") || error.message.includes("distance")) {
        errorTitle = "Segments Too Far Apart";
        errorDescription = "The selected segments are too far apart to route efficiently. Try selecting closer segments.";
      } else if (error.message.includes("Mapbox") || error.message.includes("Strava") || error.message.includes("external")) {
        errorTitle = "Service Issue";
        errorDescription = "There's a temporary issue with external services. Please try again in a few minutes.";
      }

      // Show error toast
      toast({
        title: `❌ ${errorTitle}`,
        description: errorDescription,
        variant: "destructive",
      });
    }
  }, [isError, error, toast]);

  // Determine current state for rendering
  const getModalContent = () => {
    if (isPending) {
      return (
        <div className="flex flex-col items-center justify-center py-8">
          <div className="mb-4 h-8 w-8 animate-spin rounded-full border-4 border-blue-200 border-t-blue-600"></div>
          <div className="text-center">
            <h3 className="mb-2 text-lg font-medium text-gray-900">
              Crunching numbers...
            </h3>
            <p className="text-sm text-gray-600">
              Optimizing your route across {selectedSegments.length} segments
            </p>
          </div>
        </div>
      );
    }

    if (isError) {
      return (
        <div className="py-6">
          <div className="rounded-md bg-red-50 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <span className="text-red-400">❌</span>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  Trip Planning Failed
                </h3>
                <div className="mt-2 text-sm text-red-700">
                  <p>
                    {error?.message ?? "An unexpected error occurred while planning your trip."}
                  </p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="mt-4 flex justify-end">
            <button
              onClick={() => reset()}
              className="rounded-md bg-blue-600 px-4 py-2 text-sm text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Try Again
            </button>
          </div>
        </div>
      );
    }

    if (isSuccess && data) {
      // Generate Markdown content based on success/failure
      const markdownContent = data.ok 
        ? planResponseToMarkdown(data)
        : planErrorToMarkdown(data);

      return (
        <div className="py-6">
          {/* Success/Error status banner */}
          <div className={`rounded-md p-4 ${data.ok ? 'bg-green-50' : 'bg-red-50'}`}>
            <div className="flex">
              <div className="flex-shrink-0">
                <span className={data.ok ? 'text-green-400' : 'text-red-400'}>
                  {data.ok ? '✅' : '❌'}
                </span>
              </div>
              <div className="ml-3">
                <h3 className={`text-sm font-medium ${data.ok ? 'text-green-800' : 'text-red-800'}`}>
                  {data.ok ? 'Trip Planning Successful!' : 'Trip Planning Failed'}
                </h3>
                <div className={`mt-2 text-sm ${data.ok ? 'text-green-700' : 'text-red-700'}`}>
                  <p>
                    {data.ok 
                      ? `Found routes for ${selectedSegments.length} segments.`
                      : 'Please review the details below and try again.'
                    }
                  </p>
                  {data.ok && (
                    <p className="mt-1">
                      Total: {Math.round(data.totalDistanceKm)}km, {Math.round(data.totalElevationGainM)}m elevation
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Markdown itinerary */}
          <div className="mt-4 rounded-md border bg-white p-6">
            <div className="prose prose-sm max-w-none">
              <ReactMarkdown
                components={{
                  // Open Strava links in new tab
                  a: ({ href, children, ...props }) => (
                    <a
                      href={href}
                      target={href?.includes('strava.com') ? '_blank' : undefined}
                      rel={href?.includes('strava.com') ? 'noopener noreferrer' : undefined}
                      className="text-blue-600 hover:text-blue-800 underline"
                      {...props}
                    >
                      {children}
                    </a>
                  ),
                  // Style tables nicely
                  table: ({ children, ...props }) => (
                    <table className="min-w-full divide-y divide-gray-200" {...props}>
                      {children}
                    </table>
                  ),
                  thead: ({ children, ...props }) => (
                    <thead className="bg-gray-50" {...props}>
                      {children}
                    </thead>
                  ),
                  th: ({ children, ...props }) => (
                    <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" {...props}>
                      {children}
                    </th>
                  ),
                  td: ({ children, ...props }) => (
                    <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900" {...props}>
                      {children}
                    </td>
                  ),
                }}
              >
                {markdownContent}
              </ReactMarkdown>
            </div>
            
            {/* Copy to clipboard button */}
            <div className="mt-4 flex justify-end">
              <button
                onClick={() => {
                  navigator.clipboard.writeText(markdownContent).then(() => {
                    // Simple feedback - could be enhanced with toast
                    console.log('Copied to clipboard');
                  }).catch(console.error);
                }}
                className="rounded-md bg-gray-100 px-3 py-1 text-xs text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                title="Copy Markdown to clipboard"
              >
                📋 Copy Markdown
              </button>
            </div>
          </div>
        </div>
      );
    }

    // Idle state (shouldn't normally be reached due to auto-trigger)
    return (
      <div className="py-8 text-center">
        <div className="mb-3 text-4xl text-gray-400">🚴‍♀️</div>
        <div className="mb-1 text-sm font-medium text-gray-900">
          Ready to plan your trip
        </div>
        <div className="text-sm text-gray-500">
          {selectedSegments.length} segments selected
        </div>
      </div>
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>
            Trip Planner
            {selectedSegments.length > 0 && (
              <span className="ml-2 text-sm font-normal text-gray-500">
                ({selectedSegments.length} segments)
              </span>
            )}
          </DialogTitle>
        </DialogHeader>
        
        {getModalContent()}
      </DialogContent>
    </Dialog>
  );
} 