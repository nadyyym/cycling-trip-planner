"use client";

import { useState } from "react";
import ReactMarkdown from "react-markdown";
import { type Trip } from "~/app/_hooks/useTripRouteStore";
import { type PlanResponse } from "~/types/routePlanner";
import { useToast } from "~/hooks/use-toast";
import { Copy, Calendar, MapPin, Mountain, Clock, Palette } from "lucide-react";
import { getDayColor, getDayColorHex } from "~/lib/mapUtils";

interface RouteListSidebarProps {
  /** Whether the trip planning is in progress */
  isLoading: boolean;
  /** Error from trip planning if any */
  error: { message: string } | null;
  /** Current planned trip */
  currentTrip: Trip | null;
  /** Raw plan response from API */
  planResponse?: PlanResponse;
}

/**
 * Converts a successful plan response to Markdown format
 * Creates a human-readable itinerary with day-by-day breakdown
 */
function planResponseToMarkdown(data: { ok: true; routes: Array<{ dayNumber: number; distanceKm: number; elevationGainM: number; segments: Array<{ id: number; name: string; stravaUrl: string }>; durationMinutes: number }>; totalDistanceKm: number; totalElevationGainM: number; totalDurationMinutes: number }): string {
  const lines: string[] = [];
  
  // Trip header
  lines.push("# üö¥‚Äç‚ôÄÔ∏è Your Cycling Trip Itinerary");
  lines.push("");
  
  // Trip summary
  lines.push("## Trip Summary");
  lines.push(`**Total Distance:** ${Math.round(data.totalDistanceKm)} km  `);
  lines.push(`**Total Elevation:** ${Math.round(data.totalElevationGainM)} m  `);
  lines.push(`**Estimated Duration:** ${Math.round(data.totalDurationMinutes / 60 * 10) / 10} hours  `);
  lines.push(`**Number of Days:** ${data.routes.length}`);
  lines.push("");
  
  // Day-by-day breakdown
  for (const route of data.routes) {
    lines.push(`## Day ${route.dayNumber}`);
    lines.push(`**Distance:** ${Math.round(route.distanceKm)} km  **Elevation:** ${Math.round(route.elevationGainM)} m  **Duration:** ${Math.round(route.durationMinutes / 60 * 10) / 10} hours`);
    lines.push("");
    
    if (route.segments.length > 0) {
      lines.push("| # | Segment | Link |");
      lines.push("|:-:|---------|------|");
      
      route.segments.forEach((segment, index) => {
        // Escape any markdown special characters in segment names
        const escapedName = segment.name.replace(/[|\\`*_{}[\]()#+\-.!]/g, '\\$&');
        lines.push(`| ${index + 1} | ${escapedName} | [Strava](${segment.stravaUrl}) |`);
      });
      lines.push("");
    } else {
      lines.push("*No segments planned for this day*");
      lines.push("");
    }
  }
  
  // Footer
  lines.push("---");
  lines.push("*Generated by Cycling Trip Planner* üö¥‚Äç‚ôÄÔ∏è");
  
  return lines.join("\n");
}

/**
 * Color legend component to show day-color mapping
 */
function ColorLegend({ totalDays }: { totalDays: number }) {
  return (
    <div className="rounded-lg border bg-gray-50 p-3">
      <div className="mb-2 flex items-center gap-2">
        <Palette className="h-4 w-4 text-gray-600" />
        <h4 className="text-sm font-medium text-gray-900">Day Colors</h4>
      </div>
      <div className="grid grid-cols-2 gap-2">
        {Array.from({ length: Math.min(totalDays, 4) }, (_, index) => {
          const dayNumber = index + 1;
          const color = getDayColor(dayNumber);
          return (
            <div key={dayNumber} className="flex items-center gap-2">
              <div 
                className="h-3 w-3 rounded-full border border-gray-300"
                style={{ backgroundColor: color.hex }}
              />
              <span className="text-xs text-gray-600">
                Day {dayNumber}
              </span>
            </div>
          );
        })}
      </div>
    </div>
  );
}

/**
 * Sidebar component that displays planned trip routes with day-by-day breakdown
 * Replaces individual segment display with route-focused information
 */
export function RouteListSidebar({
  isLoading,
  error,
  currentTrip,
  planResponse,
}: RouteListSidebarProps) {
  const [showMarkdown, setShowMarkdown] = useState(false);
  const { toast } = useToast();

  // Handle copy to clipboard
  const handleCopyMarkdown = () => {
    if (planResponse?.ok) {
      const markdown = planResponseToMarkdown(planResponse);
      navigator.clipboard.writeText(markdown).then(() => {
        toast({
          title: "üìã Copied!",
          description: "Trip itinerary copied to clipboard",
          variant: "default",
        });
      }).catch(() => {
        toast({
          title: "‚ùå Copy Failed",
          description: "Failed to copy to clipboard",
          variant: "destructive",
        });
      });
    }
  };

  return (
    <div className="w-80 overflow-y-auto border-r bg-white p-4">
      <div className="space-y-4">
        {/* Header */}
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Trip Planning</h2>
          <p className="text-sm text-gray-600">Your multi-day cycling itinerary</p>
        </div>

        {/* Loading state */}
        {isLoading && (
          <div className="space-y-4">
            <div className="flex flex-col items-center justify-center py-8">
              <div className="mb-4 h-8 w-8 animate-spin rounded-full border-4 border-blue-200 border-t-blue-600"></div>
              <div className="text-center">
                <h3 className="mb-2 text-lg font-medium text-gray-900">
                  Planning your trip...
                </h3>
                <p className="text-sm text-gray-600">
                  Optimizing routes and calculating distances
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Error state */}
        {error && (
          <div className="rounded-md bg-red-50 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <span className="text-red-400">‚ùå</span>
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  Trip Planning Failed
                </h3>
                <div className="mt-2 text-sm text-red-700">
                  <p>{error.message}</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Success state with route breakdown */}
        {currentTrip && planResponse?.ok && (
          <div className="space-y-4">
            {/* Trip summary card */}
            <div className="rounded-lg border bg-gradient-to-br from-green-50 to-blue-50 p-4">
              <h3 className="mb-3 text-lg font-medium text-gray-900">Trip Summary</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-center gap-2 text-sm">
                  <Calendar className="h-4 w-4 text-blue-600" />
                  <span className="font-medium">{currentTrip.routes.length} days</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <MapPin className="h-4 w-4 text-green-600" />
                  <span className="font-medium">{Math.round(currentTrip.totalDistanceKm)} km</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <Mountain className="h-4 w-4 text-orange-600" />
                  <span className="font-medium">{Math.round(currentTrip.totalElevationGainM)} m</span>
                </div>
                <div className="flex items-center gap-2 text-sm">
                  <Clock className="h-4 w-4 text-purple-600" />
                  <span className="font-medium">
                    {Math.round(planResponse.totalDurationMinutes / 60 * 10) / 10}h
                  </span>
                </div>
              </div>
              
              {/* Action buttons */}
              <div className="mt-4 flex gap-2">
                <button
                  onClick={() => setShowMarkdown(!showMarkdown)}
                  className="flex-1 rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                >
                  {showMarkdown ? 'Hide Details' : 'Show Details'}
                </button>
                <button
                  onClick={handleCopyMarkdown}
                  className="inline-flex items-center gap-1 rounded-md bg-gray-100 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
                  title="Copy itinerary to clipboard"
                >
                  <Copy className="h-4 w-4" />
                  Copy
                </button>
              </div>
            </div>

            {/* Daily routes */}
            <div className="space-y-3">
              <h3 className="text-sm font-medium text-gray-900">Daily Routes</h3>
              
              {/* Color Legend */}
              <ColorLegend totalDays={currentTrip.routes.length} />
              
              {currentTrip.routes.map((route, index) => {
                const dayColor = getDayColor(route.dayNumber);
                const colorClass = `${dayColor.borderClass} ${dayColor.bgClass}`;
                
                return (
                  <div
                    key={route.dayNumber}
                    className={`cursor-pointer rounded-lg border p-3 transition-all duration-200 hover:shadow-md ${colorClass}`}
                  >
                    <div className="mb-2 flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div 
                          className="h-3 w-3 rounded-full border border-gray-300"
                          style={{ backgroundColor: dayColor.hex }}
                        />
                        <h4 className="text-sm font-medium text-gray-900">
                          Day {route.dayNumber}
                        </h4>
                      </div>
                      <span className="text-xs text-gray-500">
                        {route.segmentNames.length} segments
                      </span>
                    </div>

                    {/* Enhanced route stats with better distance visibility */}
                    <div className="mb-2 grid grid-cols-2 gap-2 text-xs text-gray-600">
                      <span className="flex items-center gap-1 font-medium">
                        üìè <span className={`${dayColor.textClass} font-semibold`}>
                          {Math.round(route.distanceKm)} km
                        </span>
                      </span>
                      <span className="flex items-center gap-1">
                        ‚õ∞Ô∏è {Math.round(route.elevationGainM)} m
                      </span>
                    </div>

                    {/* Segment list preview */}
                    {route.segmentNames.length > 0 && (
                      <div className="text-xs text-gray-600">
                        <div className="truncate">
                          üéØ {route.segmentNames.slice(0, 2).join(", ")}
                          {route.segmentNames.length > 2 && ` +${route.segmentNames.length - 2} more`}
                        </div>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>

            {/* Detailed markdown view */}
            {showMarkdown && (
              <div className="rounded-md border bg-white p-4">
                <div className="prose prose-sm max-w-none">
                  <ReactMarkdown
                    components={{
                      // Open Strava links in new tab
                      a: ({ href, children, ...props }) => (
                        <a
                          href={href}
                          target={href?.includes('strava.com') ? '_blank' : undefined}
                          rel={href?.includes('strava.com') ? 'noopener noreferrer' : undefined}
                          className="text-blue-600 hover:text-blue-800 underline"
                          {...props}
                        >
                          {children}
                        </a>
                      ),
                      // Style tables nicely
                      table: ({ children, ...props }) => (
                        <table className="min-w-full divide-y divide-gray-200" {...props}>
                          {children}
                        </table>
                      ),
                      thead: ({ children, ...props }) => (
                        <thead className="bg-gray-50" {...props}>
                          {children}
                        </thead>
                      ),
                      th: ({ children, ...props }) => (
                        <th className="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" {...props}>
                          {children}
                        </th>
                      ),
                      td: ({ children, ...props }) => (
                        <td className="px-3 py-2 whitespace-nowrap text-sm text-gray-900" {...props}>
                          {children}
                        </td>
                      ),
                    }}
                  >
                    {planResponseToMarkdown(planResponse)}
                  </ReactMarkdown>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Failed planning state with detailed error */}
        {planResponse && !planResponse.ok && (
          <div className="space-y-4">
            <div className="rounded-md bg-red-50 p-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <span className="text-red-400">‚ùå</span>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">
                    Trip Planning Failed
                  </h3>
                  <div className="mt-2 text-sm text-red-700">
                    <p><strong>Error:</strong> {planResponse.error}</p>
                    <p className="mt-1">{planResponse.details}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Suggestions based on error type */}
            <div className="rounded-md bg-yellow-50 p-4">
              <h4 className="text-sm font-medium text-yellow-800 mb-2">Suggestions:</h4>
              <ul className="text-sm text-yellow-700 space-y-1">
                {planResponse.error === 'dailyLimitExceeded' && (
                  <>
                    <li>‚Ä¢ Remove one or more segments from your selection</li>
                    <li>‚Ä¢ Choose segments that are closer together</li>
                  </>
                )}
                {planResponse.error === 'needMoreDays' && (
                  <>
                    <li>‚Ä¢ Remove some segments to fit within 4 days</li>
                    <li>‚Ä¢ Choose segments that are closer together</li>
                  </>
                )}
                {planResponse.error === 'segmentTooFar' && (
                  <>
                    <li>‚Ä¢ Select segments within the same region</li>
                    <li>‚Ä¢ Remove segments that are outliers from your main route</li>
                  </>
                )}
                {planResponse.error === 'externalApi' && (
                  <>
                    <li>‚Ä¢ Wait a few minutes and try again</li>
                    <li>‚Ä¢ Check your internet connection</li>
                  </>
                )}
              </ul>
            </div>
          </div>
        )}

        {/* Empty state */}
        {!isLoading && !error && !currentTrip && !planResponse && (
          <div className="py-8 text-center">
            <div className="mb-3 text-4xl text-gray-400">üó∫Ô∏è</div>
            <div className="mb-1 text-sm font-medium text-gray-900">
              No trip planned yet
            </div>
            <div className="text-sm text-gray-500">
              Your trip routes will appear here once planned
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 